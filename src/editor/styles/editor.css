/* Give a remote feeling to the document */
.ProseMirror {
    padding: 1rem;
    border-radius: 0.5rem;
    min-height: 100%;
    white-space: pre-wrap;
}

.ProseMirror:focus {
    outline: none;
}

/* Smooth typing aesthetics */
.smooth-type {
    /* Prefer modern UI font with good hinting */
    font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Inter, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji";
}

.ProseMirror {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-rendering: optimizeLegibility;
    font-variant-ligatures: contextual common-ligatures;
    font-feature-settings: "calt" 1, "liga" 1, "kern" 1;
    
    /* Real-time customizable properties */
    font-family: var(--editor-font-family, ui-sans-serif) !important;
    font-size: var(--editor-font-size, 16px) !important;
    line-height: var(--editor-line-height, 1.7) !important;
    letter-spacing: var(--editor-letter-spacing, 0.003em) !important;
    
    caret-color: rgb(var(--accent));
    scroll-behavior: smooth;
    scroll-padding-top: 80px;
    scroll-padding-bottom: 120px;
    transition: color .15s ease, background-color .15s ease, border-color .15s ease, font-size .15s ease, line-height .15s ease, letter-spacing .15s ease;
}

/* Real-time heading size customization */
.ProseMirror h1 {
    font-size: var(--editor-h1-size, 2.0em) !important;
    transition: font-size .15s ease;
}

.ProseMirror h2 {
    font-size: var(--editor-h2-size, 1.6em) !important;
    transition: font-size .15s ease;
}

.ProseMirror h3 {
    font-size: var(--editor-h3-size, 1.3em) !important;
    transition: font-size .15s ease;
}

.ProseMirror p.is-editor-empty:first-child::before {
    content: attr(data-placeholder);
    float: left;
    color: rgb(var(--editor-placeholder));
    pointer-events: none;
    height: 0;
}

/* Ensure the editor area fills available space, with limited space
   after the last line similar to VS Code's scrollBeyondLastLine false. */
.tiptap-area {
    min-height: 60vh; /* grows with viewport */
    padding-bottom: 4rem; /* ~2-3 lines of cushion */
}

/* Tables */
.tableWrapper {
    overflow-x: auto;
}
.tableWrapper table,
.ProseMirror table {
    border-collapse: collapse;
    table-layout: fixed;
    width: 100%;
    margin: 0;
    overflow: hidden;
}
.tableWrapper td,
.tableWrapper th,
.ProseMirror td,
.ProseMirror th {
    min-width: 1em;
    border: 1.5px solid rgb(var(--border));
    padding: 6px 8px;
    vertical-align: top;
    box-sizing: border-box;
    position: relative;
    background: rgb(var(--bg));
}
.tableWrapper .selectedCell::after,
.ProseMirror .selectedCell::after {
    content: "";
    position: absolute;
    left: 0; right: 0; top: 0; bottom: 0;
    background: rgb(var(--accent) / 0.15);
    pointer-events: none;
}
.tableWrapper .column-resize-handle,
.ProseMirror .column-resize-handle {
    position: absolute;
    right: -2px;
    top: 0;
    bottom: -2px;
    width: 4px;
    background-color: rgb(var(--accent));
    opacity: 0.25;
    pointer-events: none;
}
.resize-cursor {
    cursor: col-resize;
}

/* Images: responsive, nice default */
.ProseMirror img {
    max-width: 100%;
    height: auto;
    border-radius: 0.375rem;
    display: inline-block;
}

/* Math (works with or without KaTeX) */
.math-inline {
    padding: 0 0.15rem;
    border-radius: 0.25rem;
    background: rgb(var(--panel));
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
}
.math-block {
    padding: 0.5rem 0.75rem;
    border-radius: 0.375rem;
    background: rgb(var(--panel));
    margin: 0.5rem 0;
}

/* All links - both wiki and regular markdown links */
.ProseMirror a,
.ProseMirror a[href],
.wiki-link,
.ProseMirror a.wiki-link {
    color: rgb(var(--accent, 59 130 246)) !important; /* fallback to blue-500 */
    text-decoration: underline;
    text-decoration-color: rgb(var(--accent, 59 130 246) / 0.5);
    cursor: pointer;
}

.ProseMirror a:hover,
.ProseMirror a[href]:hover,
.wiki-link:hover,
.ProseMirror a.wiki-link:hover { 
    text-decoration: underline;
    text-decoration-color: rgb(var(--accent, 59 130 246));
    opacity: 0.8;
}
.wiki-image {
    max-width: 100%;
    height: auto;
    border-radius: 0.375rem;
}

/* Regular markdown images */
.ProseMirror img,
.ProseMirror .editor-image {
    max-width: 100%;
    height: auto;
    border-radius: 0.375rem;
    border: 1px solid rgb(var(--border) / 0.2);
    box-shadow: 0 2px 8px rgb(var(--bg) / 0.1);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.ProseMirror img:hover,
.ProseMirror .editor-image:hover {
    transform: scale(1.02);
    box-shadow: 0 4px 16px rgb(var(--bg) / 0.2);
}

/* Stylish Task List checkboxes */
ul[data-type="taskList"] {
    list-style: none;
    padding-left: 0;
    margin: 0.5rem 0;
}
ul[data-type="taskList"] li {
    display: flex;
    align-items: center; /* keep text aligned with checkbox */
    gap: 0.5rem;
    margin: 0.25rem 0;
}
ul[data-type="taskList"] li > label {
    display: inline-flex; /* don't stretch across the row */
    align-items: center;
    flex: 0 0 auto; /* keep label (checkbox) at its intrinsic size */
    gap: 0.5rem;
    user-select: none;
}
/* Ensure the text/content sits on the same row and wraps nicely */
ul[data-type="taskList"] li > div {
    flex: 1 1 auto;
    min-width: 0; /* allow wrapping instead of forcing new line */
}
ul[data-type="taskList"] li > div > p {
    margin: 0; /* remove default paragraph margin that pushes text downward */
}
ul[data-type="taskList"] li > label > input[type="checkbox"] {
    appearance: none;
    -webkit-appearance: none;
    width: 1rem;
    height: 1rem;
    border-radius: 0.375rem;
    border: 1.5px solid rgb(var(--border));
    background: rgb(var(--bg));
    display: grid;
    place-items: center;
    cursor: pointer;
    transition: background .15s ease, border-color .15s ease, box-shadow .15s ease;
}
ul[data-type="taskList"] li > label > input[type="checkbox"]:hover {
    box-shadow: 0 0 0 4px rgb(var(--accent) / 0.15);
}
ul[data-type="taskList"] li > label > input[type="checkbox"]:checked {
    background: rgb(var(--accent));
    border-color: rgb(var(--accent));
}
ul[data-type="taskList"] li > label > input[type="checkbox"]:checked::after {
    content: 'âœ“';
    color: white;
    font-size: 0.75rem;
    line-height: 1;
}

/* Strikethrough text */
.ProseMirror s,
.ProseMirror del,
.ProseMirror [data-type="strike"] {
    text-decoration: line-through;
    text-decoration-color: rgb(var(--text) / 0.6);
    text-decoration-thickness: 2px;
}

/* Highlights */
.ProseMirror mark,
.ProseMirror [data-type="highlight"] {
    background: rgb(var(--accent) / 0.2);
    padding: 0.1em 0.2em;
    border-radius: 0.25rem;
    color: inherit;
}

/* Multi-color highlights */
.ProseMirror mark[data-color="red"] { background: rgba(239, 68, 68, 0.2); }
.ProseMirror mark[data-color="orange"] { background: rgba(249, 115, 22, 0.2); }
.ProseMirror mark[data-color="yellow"] { background: rgba(234, 179, 8, 0.2); }
.ProseMirror mark[data-color="green"] { background: rgba(34, 197, 94, 0.2); }
.ProseMirror mark[data-color="blue"] { background: rgba(59, 130, 246, 0.2); }
.ProseMirror mark[data-color="purple"] { background: rgba(147, 51, 234, 0.2); }
.ProseMirror mark[data-color="pink"] { background: rgba(236, 72, 153, 0.2); }

/* Enhanced code blocks with syntax highlighting */
.ProseMirror pre {
    background: rgb(var(--panel));
    border: 1px solid rgb(var(--border));
    border-radius: 0.5rem;
    padding: 1rem;
    margin: 1rem 0;
    overflow-x: auto;
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    font-size: 0.875em;
    line-height: 1.5;
    position: relative;
}

.ProseMirror pre code {
    background: none;
    padding: 0;
    border-radius: 0;
    font-size: inherit;
    color: inherit;
}

/* Language label for code blocks */
.ProseMirror pre::before {
    content: attr(data-language);
    position: absolute;
    top: 0.5rem;
    right: 0.75rem;
    background: rgb(var(--bg));
    color: rgb(var(--muted));
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-weight: 500;
}

/* Horizontal rules */
.ProseMirror hr {
    border: none;
    height: 2px;
    background: linear-gradient(to right, transparent, rgb(var(--border)), transparent);
    margin: 2rem 0;
    border-radius: 1px;
}

/* Enhanced blockquotes */
.ProseMirror blockquote {
    border-left: 4px solid rgb(var(--accent));
    margin: 1rem 0;
    padding: 0.5rem 0 0.5rem 1rem;
    background: rgb(var(--panel) / 0.3);
    border-radius: 0 0.375rem 0.375rem 0;
    font-style: italic;
    color: rgb(var(--text) / 0.9);
}

/* Enhanced lists */
.ProseMirror ul,
.ProseMirror ol {
    padding-left: 1.5rem;
}

.ProseMirror ul li {
    list-style-type: disc;
    margin: 0.25rem 0;
}

.ProseMirror ol li {
    list-style-type: decimal;
    margin: 0.25rem 0;
}

/* Nested list styling */
.ProseMirror ul ul li {
    list-style-type: circle;
}

.ProseMirror ul ul ul li {
    list-style-type: square;
}

/* Enhanced headings */
.ProseMirror h1,
.ProseMirror h2,
.ProseMirror h3,
.ProseMirror h4,
.ProseMirror h5,
.ProseMirror h6 {
    font-weight: 600;
    margin: 1.5rem 0 0.75rem 0;
    line-height: 1.25;
}

.ProseMirror h1 {
    border-bottom: 2px solid rgb(var(--border));
    padding-bottom: 0.5rem;
}

.ProseMirror h2 {
    border-bottom: 1px solid rgb(var(--border) / 0.5);
    padding-bottom: 0.25rem;
}

/* Enhanced emphasis */
.ProseMirror strong {
    font-weight: 600;
    color: rgb(var(--text));
}

.ProseMirror em {
    font-style: italic;
    color: rgb(var(--text) / 0.9);
}

/* Enhanced inline code */
.ProseMirror code {
    background: rgb(var(--panel));
    color: rgb(var(--accent));
    padding: 0.15rem 0.3rem;
    border-radius: 0.25rem;
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    font-size: 0.875em;
    font-weight: 500;
    border: 1px solid rgb(var(--border) / 0.3);
}

/* Math blocks and inline math */
.ProseMirror .math-inline {
    background: rgb(var(--panel) / 0.3);
    border-radius: 0.25rem;
    padding: 0.125rem 0.25rem;
    font-family: "KaTeX_Main", "Times New Roman", serif;
}

.ProseMirror .math-block {
    background: rgb(var(--panel) / 0.3);
    border: 1px solid rgb(var(--border) / 0.3);
    border-radius: 0.375rem;
    padding: 1rem;
    margin: 1rem 0;
    text-align: center;
    font-family: "KaTeX_Main", "Times New Roman", serif;
    overflow-x: auto;
}

/* Interactive task styles */
.ProseMirror .editor-task {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  background: rgba(255, 255, 255, 0.03);
  border: 1px solid rgba(255, 255, 255, 0.08);
  border-radius: 6px;
  padding: 0.375rem 0.75rem;
  margin: 0.25rem 0;
  transition: all 0.2s ease;
  cursor: pointer;
  font-family: inherit;
}

/* Task text styling for emoji-prefixed tasks */
.ProseMirror p:has-text(ðŸ”´),
.ProseMirror p:has-text(ðŸŸ¡),
.ProseMirror p:has-text(ðŸ”µ),
.ProseMirror p:has-text(âšª),
.ProseMirror p:has-text(âœ…) {
  cursor: pointer;
}

/* Style task text that starts with status emojis */
.ProseMirror *[data-task-text],
.ProseMirror span[data-task-text] {
  background: rgba(var(--accent), 0.1);
  border: 1px solid rgba(var(--accent), 0.2);
  border-radius: 6px;
  padding: 0.25rem 0.5rem;
  margin: 0.125rem 0;
  cursor: pointer;
  transition: all 0.2s ease;
  display: inline-block;
  font-weight: 500;
}

.ProseMirror *[data-task-text]:hover,
.ProseMirror span[data-task-text]:hover {
  background: rgba(var(--accent), 0.2);
  border-color: rgba(var(--accent), 0.4);
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.ProseMirror .editor-task:hover {
  background: rgba(255, 255, 255, 0.08);
  border-color: var(--app-accent);
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.ProseMirror .task-indicator {
  font-size: 0.875rem;
  font-weight: 500;
  padding: 0.125rem 0.375rem;
  border-radius: 4px;
  text-align: center;
  min-width: 1.5rem;
}

.ProseMirror .editor-task.task-urgent .task-indicator {
  background: rgb(var(--task-urgent) / 0.2);
  color: rgb(var(--task-urgent));
  border: 1px solid rgb(var(--task-urgent) / 0.3);
}

.ProseMirror .editor-task.task-needs-info .task-indicator {
  background: rgb(var(--task-question) / 0.2);
  color: rgb(var(--task-question));
  border: 1px solid rgb(var(--task-question) / 0.3);
}

.ProseMirror .editor-task.task-in-progress .task-indicator {
  background: rgb(var(--task-progress) / 0.2);
  color: rgb(var(--task-progress));
  border: 1px solid rgb(var(--task-progress) / 0.3);
}

.ProseMirror .editor-task.task-todo .task-indicator {
  background: rgb(var(--task-todo) / 0.2);
  color: rgb(var(--task-todo));
  border: 1px solid rgb(var(--task-todo) / 0.3);
}

.ProseMirror .editor-task.task-completed .task-indicator {
  background: rgb(var(--task-completed) / 0.2);
  color: rgb(var(--task-completed));
  border: 1px solid rgb(var(--task-completed) / 0.3);
}

.ProseMirror .task-text {
  flex: 1;
  color: var(--app-text);
  font-size: 0.875rem;
}

.ProseMirror .task-jump-btn {
  background: none;
  border: none;
  font-size: 0.75rem;
  opacity: 0.6;
  cursor: pointer;
  padding: 0.125rem;
  border-radius: 3px;
  transition: all 0.2s ease;
}

.ProseMirror .task-jump-btn:hover {
  opacity: 1;
  background: var(--app-accent);
  transform: scale(1.1);
}
