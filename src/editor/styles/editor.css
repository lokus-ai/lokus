/* Give a remote feeling to the document */
.ProseMirror {
    padding: 1rem;
    border-radius: 0.5rem;
    min-height: 100%;
    white-space: pre-wrap;
}

.ProseMirror:focus {
    outline: none;
}

/* Remove focus outlines from context menu trigger wrapper */
[data-radix-context-menu-trigger]:focus,
[data-radix-context-menu-trigger]:focus-visible {
    outline: none !important;
    box-shadow: none !important;
    border: none !important;
}

/* Ensure editor container doesn't show focus styles */
.ProseMirror-focused,
.ProseMirror-focused:focus,
.ProseMirror-focused:focus-visible {
    outline: none !important;
    box-shadow: none !important;
    border: none !important;
}

/* Smooth typing aesthetics */
.smooth-type {
    /* Prefer modern UI font with good hinting */
    font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Inter, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji";
}

.ProseMirror {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-rendering: optimizeLegibility;
    font-variant-ligatures: contextual common-ligatures;
    font-feature-settings: "calt" 1, "liga" 1, "kern" 1;

    /* Real-time customizable properties */
    font-family: var(--editor-font-family, ui-sans-serif) !important;
    font-size: var(--editor-font-size, 16px) !important;
    line-height: var(--editor-line-height, 1.7) !important;
    letter-spacing: var(--editor-letter-spacing, 0.003em) !important;
    font-weight: var(--editor-font-weight, 400) !important;
    color: var(--editor-text-color, rgb(var(--text))) !important;

    caret-color: rgb(var(--accent));
    scroll-behavior: smooth;
    scroll-padding-top: 80px;
    scroll-padding-bottom: 120px;
    transition: color .15s ease, background-color .15s ease, border-color .15s ease, font-size .15s ease, line-height .15s ease, letter-spacing .15s ease;
}

/* Selection color */
.ProseMirror::selection,
.ProseMirror *::selection {
    background: var(--editor-selection-color, rgba(99, 102, 241, 0.2)) !important;
}

/* Paragraph spacing */
.ProseMirror p {
    margin: var(--editor-paragraph-spacing, 1rem) 0;
}

/* Real-time heading size customization */
.ProseMirror h1,
.ProseMirror h2,
.ProseMirror h3,
.ProseMirror h4,
.ProseMirror h5,
.ProseMirror h6 {
    color: var(--editor-heading-color, inherit) !important;
    margin-top: var(--editor-heading-margin-top, 1.5rem) !important;
    margin-bottom: var(--editor-heading-margin-bottom, 0.5rem) !important;
    transition: font-size .15s ease, color .15s ease, margin .15s ease;
}

.ProseMirror h1 {
    font-size: var(--editor-h1-size, 2.0em) !important;
    font-weight: var(--editor-h1-weight, 700) !important;
}

.ProseMirror h2 {
    font-size: var(--editor-h2-size, 1.6em) !important;
    font-weight: var(--editor-h2-weight, 600) !important;
}

.ProseMirror h3 {
    font-size: var(--editor-h3-size, 1.3em) !important;
    font-weight: var(--editor-h3-weight, 600) !important;
}

/* Links */
.ProseMirror a {
    color: var(--editor-link-color, rgb(var(--accent))) !important;
    transition: color .15s ease;
    text-decoration-thickness: var(--editor-link-underline-thickness, 1px) !important;
    text-underline-offset: var(--editor-link-underline-offset, 2px) !important;
}

.ProseMirror a:hover {
    color: var(--editor-link-hover-color, rgb(var(--accent))) !important;
}

/* Code */
.ProseMirror code {
    color: var(--editor-code-color, rgb(var(--text))) !important;
    background: var(--editor-code-background, #f5f5f5) !important;
    transition: color .15s ease;
}

.ProseMirror p.is-editor-empty:first-child::before {
    content: attr(data-placeholder);
    float: left;
    color: rgb(var(--editor-placeholder));
    pointer-events: none;
    height: 0;
}

/* Ensure the editor area fills available space, with limited space
   after the last line similar to VS Code's scrollBeyondLastLine false. */
.tiptap-area {
    min-height: 60vh; /* grows with viewport */
    padding-bottom: 4rem; /* ~2-3 lines of cushion */
}

/* Tables */
.tableWrapper {
    overflow-x: auto;
}
.tableWrapper table,
.ProseMirror table {
    border-collapse: collapse;
    table-layout: fixed;
    width: 100%;
    margin: 0;
    overflow: hidden;
}
.tableWrapper td,
.tableWrapper th,
.ProseMirror td,
.ProseMirror th {
    min-width: 1em;
    border: var(--editor-table-border-width, 1px) solid var(--editor-table-border, rgb(var(--border))) !important;
    padding: var(--editor-table-cell-padding, 12px) !important;
    vertical-align: top;
    box-sizing: border-box;
    position: relative;
    background: rgb(var(--bg));
}

.tableWrapper th,
.ProseMirror th {
    background: var(--editor-table-header-bg, rgb(var(--panel))) !important;
    font-weight: 600;
}
.tableWrapper .selectedCell::after,
.ProseMirror .selectedCell::after {
    content: "";
    position: absolute;
    left: 0; right: 0; top: 0; bottom: 0;
    background: rgb(var(--accent) / 0.15);
    pointer-events: none;
}
.tableWrapper .column-resize-handle,
.ProseMirror .column-resize-handle {
    position: absolute;
    right: -2px;
    top: 0;
    bottom: -2px;
    width: 4px;
    background-color: rgb(var(--accent));
    opacity: 0.25;
    pointer-events: none;
}
.resize-cursor {
    cursor: col-resize;
}

/* Images: responsive, nice default */
.ProseMirror img {
    max-width: 100%;
    height: auto;
    border-radius: 0.375rem;
    display: inline-block;
}

/* Math (works with or without KaTeX) */
.math-inline {
    padding: 0 0.15rem;
    border-radius: 0.25rem;
    background: rgb(var(--panel));
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
}
.math-block {
    padding: 0.5rem 0.75rem;
    border-radius: 0.375rem;
    background: rgb(var(--panel));
    margin: 0.5rem 0;
}

/* All links - both wiki and regular markdown links */
.ProseMirror a,
.ProseMirror a[href],
.wiki-link,
.ProseMirror a.wiki-link {
    color: rgb(var(--accent, 59 130 246)) !important; /* fallback to blue-500 */
    text-decoration: underline;
    text-decoration-color: rgb(var(--accent, 59 130 246) / 0.5);
    cursor: pointer;
}

.ProseMirror a:hover,
.ProseMirror a[href]:hover,
.wiki-link:hover,
.ProseMirror a.wiki-link:hover { 
    text-decoration: underline;
    text-decoration-color: rgb(var(--accent, 59 130 246));
    opacity: 0.8;
}
.wiki-image {
    max-width: 100%;
    height: auto;
    border-radius: 0.375rem;
}

/* Regular markdown images */
.ProseMirror img,
.ProseMirror .editor-image {
    max-width: 100%;
    height: auto;
    border-radius: 0.375rem;
    border: 1px solid rgb(var(--border) / 0.2);
    box-shadow: 0 2px 8px rgb(var(--bg) / 0.1);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.ProseMirror img:hover,
.ProseMirror .editor-image:hover {
    transform: scale(1.02);
    box-shadow: 0 4px 16px rgb(var(--bg) / 0.2);
}

/* Stylish Task List checkboxes */
ul[data-type="taskList"] {
    list-style: none;
    padding-left: 0;
    margin: 0.5rem 0;
}
ul[data-type="taskList"] li {
    display: flex;
    align-items: center; /* keep text aligned with checkbox */
    gap: 0.5rem;
    margin: 0.25rem 0;
}
ul[data-type="taskList"] li > label {
    display: inline-flex; /* don't stretch across the row */
    align-items: center;
    flex: 0 0 auto; /* keep label (checkbox) at its intrinsic size */
    gap: 0.5rem;
    user-select: none;
}
/* Ensure the text/content sits on the same row and wraps nicely */
ul[data-type="taskList"] li > div {
    flex: 1 1 auto;
    min-width: 0; /* allow wrapping instead of forcing new line */
}
ul[data-type="taskList"] li > div > p {
    margin: 0; /* remove default paragraph margin that pushes text downward */
}
ul[data-type="taskList"] li > label > input[type="checkbox"] {
    appearance: none;
    -webkit-appearance: none;
    width: 1rem;
    height: 1rem;
    border-radius: 0.375rem;
    border: 1.5px solid rgb(var(--border));
    background: rgb(var(--bg));
    display: grid;
    place-items: center;
    cursor: pointer;
    transition: background .15s ease, border-color .15s ease, box-shadow .15s ease;
}
ul[data-type="taskList"] li > label > input[type="checkbox"]:hover {
    box-shadow: 0 0 0 4px rgb(var(--accent) / 0.15);
}
ul[data-type="taskList"] li > label > input[type="checkbox"]:checked {
    background: rgb(var(--accent));
    border-color: rgb(var(--accent));
}
ul[data-type="taskList"] li > label > input[type="checkbox"]:checked::after {
    content: 'âœ“';
    color: white;
    font-size: 0.75rem;
    line-height: 1;
}

/* Strikethrough text */
.ProseMirror s,
.ProseMirror del,
.ProseMirror [data-type="strike"] {
    text-decoration: line-through;
    text-decoration-color: var(--editor-strikethrough-color, #6c757d) !important;
    text-decoration-thickness: var(--editor-strikethrough-thickness, 2px) !important;
}

/* Underline text */
.ProseMirror u {
    text-decoration: underline;
    text-decoration-color: var(--editor-underline-color, inherit) !important;
    text-decoration-thickness: var(--editor-underline-thickness, 1px) !important;
}

/* Highlights */
.ProseMirror mark,
.ProseMirror [data-type="highlight"] {
    background: var(--editor-highlight-color, #fff3cd) !important;
    color: var(--editor-highlight-text-color, inherit) !important;
    padding: 0.1em 0.2em;
    border-radius: 0.25rem;
}

/* Multi-color highlights */
.ProseMirror mark[data-color="red"] { background: rgba(239, 68, 68, 0.2); }
.ProseMirror mark[data-color="orange"] { background: rgba(249, 115, 22, 0.2); }
.ProseMirror mark[data-color="yellow"] { background: rgba(234, 179, 8, 0.2); }
.ProseMirror mark[data-color="green"] { background: rgba(34, 197, 94, 0.2); }
.ProseMirror mark[data-color="blue"] { background: rgba(59, 130, 246, 0.2); }
.ProseMirror mark[data-color="purple"] { background: rgba(147, 51, 234, 0.2); }
.ProseMirror mark[data-color="pink"] { background: rgba(236, 72, 153, 0.2); }

/* Enhanced code blocks with syntax highlighting - isolated from external stylesheets */
.ProseMirror pre {
    background: var(--editor-code-block-bg, rgb(var(--panel))) !important;
    border: var(--editor-code-block-border-width, 1px) solid var(--editor-code-block-border, rgb(var(--border))) !important;
    border-radius: var(--editor-code-block-border-radius, 0.5rem) !important;
    padding: var(--editor-code-block-padding, 1rem) !important;
    margin: var(--editor-block-margin, 1rem) 0 !important;
    overflow-x: auto;
    font-family: var(--editor-code-block-font, ui-monospace) !important;
    font-size: var(--editor-code-block-font-size, 14px) !important;
    line-height: var(--editor-code-block-line-height, 1.5) !important;
    position: relative;
    color: rgb(var(--text)) !important;
    /* Reset any external stylesheet interference */
    box-shadow: none !important;
    text-shadow: none !important;
    filter: none !important;
    backdrop-filter: none !important;
}

.ProseMirror pre code {
    background: transparent !important;
    padding: 0 !important;
    border-radius: 0 !important;
    border: none !important;
    font-size: inherit !important;
    color: inherit !important;
    font-family: inherit !important;
    line-height: inherit !important;
    /* Prevent highlight.js or other external styling */
    text-shadow: none !important;
    box-shadow: none !important;
    filter: none !important;
}

/* Isolate all code block children from external styling */
.ProseMirror pre *,
.ProseMirror pre code * {
    background: transparent !important;
    border: none !important;
    margin: 0 !important;
    padding: 0 !important;
    text-shadow: none !important;
    box-shadow: none !important;
    filter: none !important;
    font-family: inherit !important;
    font-size: inherit !important;
    line-height: inherit !important;
}

/* Override any global .obsidian-editor code/pre styles within ProseMirror */
.ProseMirror.obsidian-editor pre,
.obsidian-editor .ProseMirror pre {
    background: rgb(var(--panel)) !important;
    border: 1px solid rgb(var(--border)) !important;
    border-radius: 0.5rem !important;
    padding: 1rem !important;
    margin: 1rem 0 !important;
    color: rgb(var(--text)) !important;
}

.ProseMirror.obsidian-editor pre code,
.obsidian-editor .ProseMirror pre code {
    background: transparent !important;
    padding: 0 !important;
    color: inherit !important;
    border: none !important;
}

/* Block external highlight.js or other syntax highlighting interference */
.ProseMirror pre .hljs,
.ProseMirror pre code .hljs,
.ProseMirror pre .hljs *,
.ProseMirror pre code .hljs * {
    background: transparent !important;
    color: inherit !important;
    text-shadow: none !important;
    font-weight: inherit !important;
}

/* Reset any katex interference with code blocks */
.ProseMirror pre .katex,
.ProseMirror pre code .katex {
    display: none !important;
}

/* Nuclear option: override ALL possible external syntax highlighting */
.ProseMirror pre,
.ProseMirror pre *,
.ProseMirror code,
.ProseMirror pre code,
.ProseMirror pre code *,
.ProseMirror pre span,
.ProseMirror pre div {
    background: rgb(var(--panel)) !important;
    color: rgb(var(--text)) !important;
    text-shadow: none !important;
    box-shadow: none !important;
    filter: none !important;
    font-weight: inherit !important;
    font-style: inherit !important;
}

/* Specifically target highlight.js classes */
.ProseMirror pre .hljs-keyword,
.ProseMirror pre .hljs-string,
.ProseMirror pre .hljs-comment,
.ProseMirror pre .hljs-number,
.ProseMirror pre .hljs-function,
.ProseMirror pre .hljs-class,
.ProseMirror pre .hljs-variable,
.ProseMirror pre .hljs-attribute,
.ProseMirror pre .hljs-tag,
.ProseMirror pre .hljs-name,
.ProseMirror pre .hljs-selector-tag,
.ProseMirror pre .hljs-selector-class,
.ProseMirror pre .hljs-selector-id,
.ProseMirror pre .hljs-property,
.ProseMirror pre .hljs-value,
.ProseMirror pre .hljs-type,
.ProseMirror pre .hljs-built_in,
.ProseMirror pre .hljs-literal,
.ProseMirror pre .hljs-title,
.ProseMirror pre .hljs-meta,
.ProseMirror pre [class*="hljs-"] {
    background: transparent !important;
    color: inherit !important;
    text-shadow: none !important;
    font-weight: inherit !important;
    font-style: inherit !important;
}

/* Override any prism.js or other syntax highlighters */
.ProseMirror pre .token,
.ProseMirror pre .token.keyword,
.ProseMirror pre .token.string,
.ProseMirror pre .token.comment,
.ProseMirror pre .token.number,
.ProseMirror pre .token.function,
.ProseMirror pre .token.class-name,
.ProseMirror pre .token.variable,
.ProseMirror pre .token.property,
.ProseMirror pre .token.operator,
.ProseMirror pre .token.punctuation,
.ProseMirror pre [class*="token"] {
    background: transparent !important;
    color: inherit !important;
    text-shadow: none !important;
    font-weight: inherit !important;
    font-style: inherit !important;
}

/* Language label for code blocks */
.ProseMirror pre::before {
    content: attr(data-language);
    position: absolute;
    top: 0.5rem;
    right: 0.75rem;
    background: rgb(var(--bg));
    color: rgb(var(--muted));
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-weight: 500;
}

/* Horizontal rules */
.ProseMirror hr {
    border: none;
    height: 2px;
    background: linear-gradient(to right, transparent, rgb(var(--border)), transparent);
    margin: 2rem 0;
    border-radius: 1px;
}

/* Enhanced blockquotes */
.ProseMirror blockquote {
    border-left: var(--editor-blockquote-border-width, 4px) var(--editor-blockquote-style, solid) var(--editor-blockquote-border, rgb(var(--accent))) !important;
    margin: var(--editor-block-margin, 1rem) 0 !important;
    padding: var(--editor-blockquote-padding, 16px) !important;
    background: rgb(var(--panel) / 0.3);
    border-radius: 0 0.375rem 0.375rem 0;
    font-style: italic;
    color: var(--editor-blockquote-color, rgb(var(--text) / 0.9)) !important;
}

/* Enhanced lists */
.ProseMirror ul,
.ProseMirror ol {
    padding-left: var(--editor-list-indent, 1.5rem) !important;
}

.ProseMirror ul li {
    list-style-type: disc;
    margin: var(--editor-list-spacing, 0.25rem) 0 !important;
}

.ProseMirror ol li {
    list-style-type: decimal;
    margin: var(--editor-list-spacing, 0.25rem) 0 !important;
}

/* Nested list styling */
.ProseMirror ul ul li {
    list-style-type: circle;
}

.ProseMirror ul ul ul li {
    list-style-type: square;
}

/* Enhanced headings */
.ProseMirror h1,
.ProseMirror h2,
.ProseMirror h3,
.ProseMirror h4,
.ProseMirror h5,
.ProseMirror h6 {
    font-weight: 600;
    margin: 1.5rem 0 0.75rem 0;
    line-height: 1.25;
    position: relative; /* For fold indicator positioning */
}

.ProseMirror h1 {
    border-bottom: 2px solid rgb(var(--border));
    padding-bottom: 0.5rem;
}

.ProseMirror h2 {
    border-bottom: 1px solid rgb(var(--border) / 0.5);
    padding-bottom: 0.25rem;
}

/* Enhanced emphasis */
.ProseMirror strong {
    font-weight: var(--editor-bold-weight, 700) !important;
    color: var(--editor-bold-color, inherit) !important;
}

.ProseMirror em {
    font-style: italic;
    color: var(--editor-italic-color, inherit) !important;
}

/* Enhanced inline code */
.ProseMirror code {
    background: rgb(var(--panel));
    color: rgb(var(--accent));
    padding: 0.15rem 0.3rem;
    border-radius: 0.25rem;
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    font-size: 0.875em;
    font-weight: 500;
    border: 1px solid rgb(var(--border) / 0.3);
}

/* Math blocks and inline math */
.ProseMirror .math-inline {
    background: rgb(var(--panel) / 0.3);
    border-radius: 0.25rem;
    padding: 0.125rem 0.25rem;
    font-family: "KaTeX_Main", "Times New Roman", serif;
}

.ProseMirror .math-block {
    background: rgb(var(--panel) / 0.3);
    border: 1px solid rgb(var(--border) / 0.3);
    border-radius: 0.375rem;
    padding: 1rem;
    margin: 1rem 0;
    text-align: center;
    font-family: "KaTeX_Main", "Times New Roman", serif;
    overflow-x: auto;
}

.ProseMirror .math-empty {
    opacity: 0.5;
    font-style: italic;
    color: rgb(var(--muted-foreground));
    border: 1px dashed rgb(var(--border) / 0.5);
}

.ProseMirror .math-empty:hover {
    opacity: 0.8;
    cursor: pointer;
}

/* Interactive task styles */
.ProseMirror .editor-task {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  background: rgba(255, 255, 255, 0.03);
  border: 1px solid rgba(255, 255, 255, 0.08);
  border-radius: 6px;
  padding: 0.375rem 0.75rem;
  margin: 0.25rem 0;
  transition: all 0.2s ease;
  cursor: pointer;
  font-family: inherit;
}

/* Task text styling for emoji-prefixed tasks */
.ProseMirror p:has-text(ðŸ”´),
.ProseMirror p:has-text(ðŸŸ¡),
.ProseMirror p:has-text(ðŸ”µ),
.ProseMirror p:has-text(âšª),
.ProseMirror p:has-text(âœ…) {
  cursor: pointer;
}

/* Style task text that starts with status emojis */
.ProseMirror *[data-task-text],
.ProseMirror span[data-task-text] {
  background: rgba(var(--accent), 0.1);
  border: 1px solid rgba(var(--accent), 0.2);
  border-radius: 6px;
  padding: 0.25rem 0.5rem;
  margin: 0.125rem 0;
  cursor: pointer;
  transition: all 0.2s ease;
  display: inline-block;
  font-weight: 500;
}

.ProseMirror *[data-task-text]:hover,
.ProseMirror span[data-task-text]:hover {
  background: rgba(var(--accent), 0.2);
  border-color: rgba(var(--accent), 0.4);
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.ProseMirror .editor-task:hover {
  background: rgba(255, 255, 255, 0.08);
  border-color: var(--app-accent);
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.ProseMirror .task-indicator {
  font-size: 0.875rem;
  font-weight: 500;
  padding: 0.125rem 0.375rem;
  border-radius: 4px;
  text-align: center;
  min-width: 1.5rem;
}

.ProseMirror .editor-task.task-urgent .task-indicator {
  background: rgb(var(--task-urgent) / 0.2);
  color: rgb(var(--task-urgent));
  border: 1px solid rgb(var(--task-urgent) / 0.3);
}

.ProseMirror .editor-task.task-needs-info .task-indicator {
  background: rgb(var(--task-question) / 0.2);
  color: rgb(var(--task-question));
  border: 1px solid rgb(var(--task-question) / 0.3);
}

.ProseMirror .editor-task.task-in-progress .task-indicator {
  background: rgb(var(--task-progress) / 0.2);
  color: rgb(var(--task-progress));
  border: 1px solid rgb(var(--task-progress) / 0.3);
}

.ProseMirror .editor-task.task-todo .task-indicator {
  background: rgb(var(--task-todo) / 0.2);
  color: rgb(var(--task-todo));
  border: 1px solid rgb(var(--task-todo) / 0.3);
}

.ProseMirror .editor-task.task-completed .task-indicator {
  background: rgb(var(--task-completed) / 0.2);
  color: rgb(var(--task-completed));
  border: 1px solid rgb(var(--task-completed) / 0.3);
}

.ProseMirror .task-text {
  flex: 1;
  color: var(--app-text);
  font-size: 0.875rem;
}

.ProseMirror .task-jump-btn {
  background: none;
  border: none;
  font-size: 0.75rem;
  opacity: 0.6;
  cursor: pointer;
  padding: 0.125rem;
  border-radius: 3px;
  transition: all 0.2s ease;
}

.ProseMirror .task-jump-btn:hover {
  opacity: 1;
  background: var(--app-accent);
  transform: scale(1.1);
}

/* Template Extension Styles */

/* Template Variable Highlighting */
.ProseMirror .template-variable {
  background: rgba(var(--accent), 0.1);
  border: 1px solid rgba(var(--accent), 0.2);
  border-radius: 4px;
  padding: 1px 4px;
  margin: 0 1px;
  font-family: ui-monospace, monospace;
  font-size: 0.9em;
  color: rgb(var(--accent));
  transition: all 0.2s ease;
  cursor: pointer;
  display: inline-block;
  position: relative;
}

.ProseMirror .template-variable:hover {
  background: rgba(var(--accent), 0.2);
  border-color: rgb(var(--accent));
  transform: translateY(-1px);
  box-shadow: 0 2px 4px rgba(var(--accent), 0.2);
}

/* Cursor Placeholder Specific Styling */
.ProseMirror .template-cursor-placeholder {
  background: rgba(var(--warning), 0.15);
  border-color: rgba(var(--warning), 0.3);
  color: rgb(var(--warning));
  animation: pulse-cursor 2s infinite;
}

.ProseMirror .template-cursor-placeholder:hover {
  background: rgba(var(--warning), 0.25);
  border-color: rgb(var(--warning));
}

@keyframes pulse-cursor {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.7; }
}

/* Invalid Variable Styling */
.ProseMirror .template-invalid {
  background: rgba(var(--destructive), 0.1);
  border-color: rgba(var(--destructive), 0.3);
  color: rgb(var(--destructive));
}

.ProseMirror .template-invalid:hover {
  background: rgba(var(--destructive), 0.2);
  border-color: rgb(var(--destructive));
}

.ProseMirror .template-invalid::after {
  content: 'âš ';
  position: absolute;
  top: -2px;
  right: -2px;
  font-size: 8px;
  color: rgb(var(--destructive));
  background: rgb(var(--background));
  border-radius: 50%;
  width: 10px;
  height: 10px;
  display: flex;
  align-items: center;
  justify-content: center;
  line-height: 1;
}

/* JavaScript Block Highlighting */
.ProseMirror .template-js-block {
  background: rgba(var(--muted), 0.1);
  border: 1px solid rgba(var(--muted), 0.2);
  border-radius: 4px;
  padding: 2px 6px;
  margin: 0 2px;
  font-family: ui-monospace, monospace;
  font-size: 0.85em;
  color: rgb(var(--muted-foreground));
  transition: all 0.2s ease;
  cursor: help;
  display: inline-block;
}

.ProseMirror .template-js-block:hover {
  background: rgba(var(--muted), 0.2);
  border-color: rgb(var(--muted));
}

/* Template Comment Highlighting */
.ProseMirror .template-comment {
  background: rgba(var(--muted), 0.05);
  border: 1px dashed rgba(var(--muted), 0.2);
  border-radius: 4px;
  padding: 1px 4px;
  margin: 0 1px;
  font-family: ui-monospace, monospace;
  font-size: 0.85em;
  color: rgb(var(--muted-foreground));
  opacity: 0.7;
  transition: all 0.2s ease;
  display: inline-block;
}

.ProseMirror .template-comment:hover {
  opacity: 1;
  background: rgba(var(--muted), 0.1);
}

/* Template Variable Tooltip */
.template-variable-tooltip {
  position: absolute;
  z-index: 1000;
  background: rgb(var(--popover));
  border: 1px solid rgb(var(--border));
  border-radius: 6px;
  padding: 8px 12px;
  font-size: 12px;
  color: rgb(var(--popover-foreground));
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  max-width: 200px;
  word-wrap: break-word;
  opacity: 0;
  transform: translateY(-5px);
  transition: all 0.2s ease;
  pointer-events: none;
}

.template-variable-tooltip.show {
  opacity: 1;
  transform: translateY(0);
}

/* Template content preview in modal */
.template-content-preview {
  background: rgb(var(--background));
  border: 1px solid rgb(var(--border));
  border-radius: 6px;
  padding: 12px;
  font-family: inherit;
  line-height: 1.6;
  white-space: pre-wrap;
  overflow-x: auto;
  max-height: 300px;
  overflow-y: auto;
}

/* Template syntax highlighting in template editor */
.template-editor .template-variable {
  background: rgba(59, 130, 246, 0.1);
  border-color: rgba(59, 130, 246, 0.2);
  color: rgb(59, 130, 246);
}

.template-editor .template-js-block {
  background: rgba(168, 85, 247, 0.1);
  border-color: rgba(168, 85, 247, 0.2);
  color: rgb(168, 85, 247);
}

.template-editor .template-comment {
  background: rgba(107, 114, 128, 0.1);
  border-color: rgba(107, 114, 128, 0.2);
  color: rgb(107, 114, 128);
}

/* Dark mode adjustments */
@media (prefers-color-scheme: dark) {
  .ProseMirror .template-variable {
    background: rgba(59, 130, 246, 0.15);
    border-color: rgba(59, 130, 246, 0.3);
  }
  
  .ProseMirror .template-js-block {
    background: rgba(168, 85, 247, 0.15);
    border-color: rgba(168, 85, 247, 0.3);
  }
  
  .ProseMirror .template-comment {
    background: rgba(107, 114, 128, 0.15);
    border-color: rgba(107, 114, 128, 0.3);
  }
}

/* Syntax Highlighting for Code Blocks */
.ProseMirror pre {
  background: rgba(0, 0, 0, 0.05);
  border: 1px solid rgba(0, 0, 0, 0.1);
  border-radius: 0.5rem;
  padding: 0.75rem 1rem;
  font-family: 'JetBrains Mono', 'Fira Code', 'Monaco', 'Consolas', monospace;
  font-size: 14px;
  line-height: 1.5;
  overflow-x: auto;
}

.ProseMirror pre code {
  background: none;
  color: inherit;
  font-size: inherit;
  padding: 0;
}

/* Syntax Highlighting Tokens */
.hljs-keyword, .hljs-selector-tag, .hljs-built_in {
  color: #0033B3; /* Keywords: public, class, function */
}

.hljs-string, .hljs-attr {
  color: #067D17; /* Strings and attributes */
}

.hljs-number, .hljs-literal {
  color: #1750EB; /* Numbers and literals: true, false, null */
}

.hljs-comment {
  color: #8C8C8C;
  font-style: italic;
}

.hljs-title, .hljs-class .hljs-title, .hljs-function .hljs-title {
  color: #00627A; /* Function and class names */
}

.hljs-variable, .hljs-template-variable {
  color: #660E7A; /* Variables */
}

.hljs-type, .hljs-class {
  color: #000000;
  font-weight: bold;
}

.hljs-meta {
  color: #9E880D; /* Annotations: @Override, decorators */
}

.hljs-params {
  color: #000000;
}

/* Dark mode syntax highlighting */
@media (prefers-color-scheme: dark) {
  .ProseMirror pre {
    background: rgba(255, 255, 255, 0.05);
    border-color: rgba(255, 255, 255, 0.1);
  }

  .hljs-keyword, .hljs-selector-tag, .hljs-built_in {
    color: #CF8E6D; /* Keywords in dark mode */
  }

  .hljs-string, .hljs-attr {
    color: #6AAB73; /* Strings in dark mode */
  }

  .hljs-number, .hljs-literal {
    color: #2AACB8; /* Numbers in dark mode */
  }

  .hljs-comment {
    color: #7A7E85;
  }

  .hljs-title, .hljs-class .hljs-title, .hljs-function .hljs-title {
    color: #56A8F5; /* Function names in dark mode */
  }

  .hljs-variable, .hljs-template-variable {
    color: #C77DBB;
  }

  .hljs-type, .hljs-class {
    color: #CF8E6D;
  }

  .hljs-meta {
    color: #BBB529;
  }

  .hljs-params {
    color: #A1C17E;
  }
}

/* Folding indicators for headings */
.ProseMirror .foldable-heading::before {
  content: '';
  position: absolute;
  left: -22px;
  top: 50%;
  transform: translateY(-50%);
  width: 18px;
  height: 18px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  user-select: none;
  color: rgb(var(--muted));
  font-size: 12px;
  transition: color 0.15s ease, transform 0.15s ease;
  z-index: 10;
}

.ProseMirror .foldable-heading.unfolded::before {
  content: 'â–¼';
}

.ProseMirror .foldable-heading.folded::before {
  content: 'â–¶';
}

.ProseMirror .foldable-heading:hover::before {
  color: rgb(var(--accent));
  transform: translateY(-50%) scale(1.15);
}

/* Folded content is hidden */
.ProseMirror .folded-content {
  display: none !important;
}


/* Editor Container and Status Bar Styles */
.editor-container {
  position: relative; 
  display: flex;
  flex-direction: column;
  height: 100%;
}

.editor-status-bar {
  position: sticky;
  bottom: 0;
  z-index: 10;

  display: flex;
  align-items: center;
  justify-content: flex-end;
  gap: 0.75rem;
  padding: 0.5rem 1rem;
  border-top: 1px solid var(--border);
  background: var(--panel);
  font-size: 0.875rem;
  color: var(--muted);
  user-select: none;
  backdrop-filter: blur(6px);
  transition: background 0.3s ease, color 0.3s ease;
  letter-spacing: 0.3px;

}

.editor-status-bar .separator {
  opacity: 0.5;
  user-select: none;
}

.editor-status-bar span {
  display: flex;
  align-items: center;
  gap: 0.25rem;
}

