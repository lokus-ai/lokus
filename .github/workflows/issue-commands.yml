name: Issue Commands Bot
on:
  issue_comment:
    types: [created]
  issues:
    types: [opened]

permissions:
  issues: write
  pull-requests: write

jobs:
  handle_commands:
    if: github.event.issue.pull_request == null
    runs-on: ubuntu-latest
    steps:
      - name: Handle /start command
        if: contains(github.event.comment.body, '/start')
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.issue;
            const commenter = context.payload.comment.user.login;
            
            // Check if issue is already assigned
            const { data: currentIssue } = await github.rest.issues.get({
              owner: issue.owner,
              repo: issue.repo,
              issue_number: issue.number
            });
            
            if (currentIssue.assignees.length > 0) {
              await github.rest.issues.createComment({
                owner: issue.owner,
                repo: issue.repo,
                issue_number: issue.number,
                body: `❌ This issue is already assigned to @${currentIssue.assignees[0].login}. Please find another issue to work on!`
              });
              return;
            }
            
            // Assign the issue
            await github.rest.issues.addAssignees({
              owner: issue.owner,
              repo: issue.repo,
              issue_number: issue.number,
              assignees: [commenter]
            });
            
            // Add comment confirming assignment
            await github.rest.issues.createComment({
              owner: issue.owner,
              repo: issue.repo,
              issue_number: issue.number,
              body: `🎉 Issue assigned to @${commenter}! 

**Next Steps:**
1. Fork the repository if you haven't already
2. Create a new branch: \`git checkout -b fix-issue-${issue.number}\`
3. Read the issue description and ask questions if needed
4. Make your changes and test them
5. Submit a pull request when ready

**Need help?** Check out our [Contributing Guide](CONTRIBUTING.md) or ask questions in the comments!

Good luck! 🚀`
            });
            
            // Add "in progress" label
            await github.rest.issues.addLabels({
              owner: issue.owner,
              repo: issue.repo,
              issue_number: issue.number,
              labels: ['in progress']
            });

      - name: Handle /close command (maintainers only)
        if: contains(github.event.comment.body, '/close')
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.issue;
            const commenter = context.payload.comment.user.login;
            
            // Check if commenter is a maintainer (has write access)
            try {
              const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner: issue.owner,
                repo: issue.repo,
                username: commenter
              });
              
              if (permission.permission !== 'write' && permission.permission !== 'admin') {
                await github.rest.issues.createComment({
                  owner: issue.owner,
                  repo: issue.repo,
                  issue_number: issue.number,
                  body: `❌ Only maintainers can close issues using commands.`
                });
                return;
              }
            } catch (error) {
              return;
            }
            
            // Close the issue
            await github.rest.issues.update({
              owner: issue.owner,
              repo: issue.repo,
              issue_number: issue.number,
              state: 'closed'
            });
            
            await github.rest.issues.createComment({
              owner: issue.owner,
              repo: issue.repo,
              issue_number: issue.number,
              body: `✅ Issue closed by @${commenter}`
            });

      - name: Handle /unassign command
        if: contains(github.event.comment.body, '/unassign')
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.issue;
            const commenter = context.payload.comment.user.login;
            
            // Get current assignees
            const { data: currentIssue } = await github.rest.issues.get({
              owner: issue.owner,
              repo: issue.repo,
              issue_number: issue.number
            });
            
            // Check if commenter is assigned or is a maintainer
            const isAssignee = currentIssue.assignees.some(assignee => assignee.login === commenter);
            
            let isMaintainer = false;
            try {
              const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner: issue.owner,
                repo: issue.repo,
                username: commenter
              });
              isMaintainer = permission.permission === 'write' || permission.permission === 'admin';
            } catch (error) {
              // Ignore permission check errors
            }
            
            if (!isAssignee && !isMaintainer) {
              await github.rest.issues.createComment({
                owner: issue.owner,
                repo: issue.repo,
                issue_number: issue.number,
                body: `❌ You can only unassign yourself or you need to be a maintainer.`
              });
              return;
            }
            
            // Remove all assignees
            await github.rest.issues.removeAssignees({
              owner: issue.owner,
              repo: issue.repo,
              issue_number: issue.number,
              assignees: currentIssue.assignees.map(a => a.login)
            });
            
            // Remove "in progress" label
            try {
              await github.rest.issues.removeLabel({
                owner: issue.owner,
                repo: issue.repo,
                issue_number: issue.number,
                name: 'in progress'
              });
            } catch (error) {
              // Label might not exist
            }
            
            await github.rest.issues.createComment({
              owner: issue.owner,
              repo: issue.repo,
              issue_number: issue.number,
              body: `🔄 Issue unassigned by @${commenter}. This issue is now available for anyone to work on!`
            });

      - name: Handle /help command
        if: contains(github.event.comment.body, '/help')
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.issue;
            
            await github.rest.issues.createComment({
              owner: issue.owner,
              repo: issue.repo,
              issue_number: issue.number,
              body: `🤖 **Available Commands:**

**For Contributors:**
- \`/start\` - Assign this issue to yourself
- \`/unassign\` - Unassign yourself from this issue  
- \`/help\` - Show this help message

**For Maintainers:**
- \`/close\` - Close this issue
- \`/unassign\` - Unassign anyone from this issue

**Getting Started:**
1. Comment \`/start\` to get assigned
2. Fork the repo and create a branch
3. Work on the issue
4. Submit a pull request
5. Celebrate! 🎉

**Need help?** Check our [Contributing Guide](CONTRIBUTING.md) or ask questions!`
            });

  # Label new issues and welcome first-time contributors
  welcome_contributor:
    if: github.event.action == 'opened'
    runs-on: ubuntu-latest
    steps:
      - name: Welcome new contributors
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.issue;
            const author = context.payload.issue.user.login;
            
            // Check if this is a first-time contributor
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: issue.owner,
              repo: issue.repo,
              creator: author,
              state: 'all'
            });
            
            const { data: prs } = await github.rest.pulls.list({
              owner: issue.owner,
              repo: issue.repo,
              state: 'all'
            });
            
            const authorPRs = prs.filter(pr => pr.user.login === author);
            
            if (issues.length <= 1 && authorPRs.length === 0) {
              // First-time contributor
              await github.rest.issues.addLabels({
                owner: issue.owner,
                repo: issue.repo,
                issue_number: issue.number,
                labels: ['first-time-contributor']
              });
              
              await github.rest.issues.createComment({
                owner: issue.owner,
                repo: issue.repo,
                issue_number: issue.number,
                body: `👋 Welcome to Lokus, @${author}! Thanks for opening your first issue!

**To get started working on this:**
1. Comment \`/start\` to assign it to yourself
2. Check out our [Contributing Guide](CONTRIBUTING.md)
3. Join our community discussions if you have questions

**New to open source?** Check out [First Timers Only](https://www.firsttimersonly.com/) for helpful resources!

We're excited to have you contribute! 🎉`
              });
            }

  # Auto-unassign stale issues after 7 days
  auto_unassign:
    runs-on: ubuntu-latest
    if: github.event.schedule || github.event_name == 'workflow_dispatch'
    steps:
      - name: Auto-unassign stale issues
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'in progress'
            });
            
            for (const issue of issues) {
              if (issue.assignees.length === 0) continue;
              
              // Check if issue has been inactive for 7 days
              const lastUpdate = new Date(issue.updated_at);
              const daysSinceUpdate = (Date.now() - lastUpdate.getTime()) / (1000 * 60 * 60 * 24);
              
              if (daysSinceUpdate > 7) {
                // Remove assignees
                await github.rest.issues.removeAssignees({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  assignees: issue.assignees.map(a => a.login)
                });
                
                // Remove "in progress" label
                try {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    name: 'in progress'
                  });
                } catch (error) {
                  // Label might not exist
                }
                
                // Add stale label
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ['stale']
                });
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `⏰ This issue has been automatically unassigned due to inactivity (7+ days).

The issue is now available for anyone to work on! Comment \`/start\` to assign it to yourself.

Previous assignees: ${issue.assignees.map(a => `@${a.login}`).join(', ')}`
                });
              }
            }

# Run the auto-unassign job daily
on:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC
  workflow_dispatch:    # Allow manual triggering