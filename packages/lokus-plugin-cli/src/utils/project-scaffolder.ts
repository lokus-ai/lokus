import * as path from 'path';
import * as fs from 'fs-extra';
import { AdvancedPluginTemplate } from '../commands/create-enhanced';
import { TemplateManager } from './template-manager';
import { logger } from './logger';

export interface ScaffolderOptions {
  pluginName: string;
  author: string;
  description: string;
  typescript: boolean;
  testing: string;
  linting: string;
  formatting: string;
  bundler: string;
  cicd: string;
  documentation: string;
  examples: boolean;
  storybook: boolean;
  workspace: boolean;
}

export class ProjectScaffolder {
  constructor(
    private targetDir: string,
    private template: AdvancedPluginTemplate,
    private options: ScaffolderOptions
  ) {}

  /**
   * Create the basic project structure
   */
  async createProjectStructure(): Promise<void> {
    const directories = [
      'src',
      'src/lib',
      'src/types',
      'src/utils',
      'test',
      'docs',
      'dist'
    ];

    // Add conditional directories
    if (this.options.examples) {
      directories.push('examples');
    }

    if (this.options.storybook) {
      directories.push('.storybook', 'src/stories');
    }

    if (this.options.workspace) {
      directories.push('packages');
    }

    // Template-specific directories
    if (this.template.category === 'UI') {
      directories.push('src/components', 'src/styles', 'src/assets');
    }

    if (this.template.category === 'Language') {
      directories.push('src/language', 'src/server', 'syntaxes', 'snippets');
    }

    if (this.template.category === 'Theme') {
      directories.push('themes', 'src/colors');
    }

    // Create all directories
    for (const dir of directories) {
      await fs.ensureDir(path.join(this.targetDir, dir));
    }
  }

  /**
   * Generate configuration files
   */
  async generateConfigFiles(): Promise<void> {
    const templateManager = new TemplateManager();
    
    // Generate package.json
    await this.generatePackageJson();
    
    // Generate plugin.json manifest
    await this.generatePluginManifest();
    
    // Generate conditional config files
    await templateManager.createConditionalFiles(this.targetDir, {
      pluginName: this.options.pluginName,
      ...this.options
    } as any);
  }

  /**
   * Setup build system configuration
   */
  async setupBuildSystem(): Promise<void> {
    switch (this.options.bundler) {
      case 'esbuild':
        await this.generateESBuildConfig();
        break;
      case 'webpack':
        await this.generateWebpackConfig();
        break;
      case 'rollup':
        await this.generateRollupConfig();
        break;
      case 'vite':
        await this.generateViteConfig();
        break;
    }
  }

  /**
   * Setup testing framework
   */
  async setupTesting(): Promise<void> {
    const testDir = path.join(this.targetDir, 'test');
    await fs.ensureDir(testDir);

    // Create test setup file
    const setupContent = this.options.testing === 'jest' 
      ? this.generateJestSetup()
      : this.generateVitestSetup();
    
    const setupFile = path.join(testDir, `setup.${this.options.typescript ? 'ts' : 'js'}`);
    await fs.writeFile(setupFile, setupContent);

    // Create sample test file
    const sampleTest = this.generateSampleTest();
    const testFile = path.join(this.targetDir, 'src', `index.test.${this.options.typescript ? 'ts' : 'js'}`);
    await fs.writeFile(testFile, sampleTest);
  }

  /**
   * Setup CI/CD pipeline
   */
  async setupCICD(): Promise<void> {
    if (this.options.cicd === 'github') {
      await fs.ensureDir(path.join(this.targetDir, '.github', 'workflows'));
    }
    // Config files are generated by TemplateManager
  }

  /**
   * Setup documentation generation
   */
  async setupDocumentation(): Promise<void> {
    const docsDir = path.join(this.targetDir, 'docs');
    await fs.ensureDir(docsDir);

    // Create README.md
    const readmeContent = await this.generateReadme();
    await fs.writeFile(path.join(this.targetDir, 'README.md'), readmeContent);

    // Create CONTRIBUTING.md
    const contributingContent = await this.generateContributing();
    await fs.writeFile(path.join(this.targetDir, 'CONTRIBUTING.md'), contributingContent);

    // Create CHANGELOG.md
    const changelogContent = await this.generateChangelog();
    await fs.writeFile(path.join(this.targetDir, 'CHANGELOG.md'), changelogContent);

    // Setup documentation tool specific config
    if (this.options.documentation === 'typedoc') {
      await this.generateTypedocConfig();
    }
  }

  /**
   * Create example code and demos
   */
  async createExamples(): Promise<void> {
    if (!this.options.examples) return;

    const examplesDir = path.join(this.targetDir, 'examples');
    await fs.ensureDir(examplesDir);

    // Generate template-specific examples
    switch (this.template.category) {
      case 'UI':
        await this.generateUIExamples();
        break;
      case 'Language':
        await this.generateLanguageExamples();
        break;
      case 'Theme':
        await this.generateThemeExamples();
        break;
      case 'Integration':
        await this.generateIntegrationExamples();
        break;
      case 'Tool':
        await this.generateToolExamples();
        break;
      case 'Data':
        await this.generateDataExamples();
        break;
      default:
        await this.generateBasicExamples();
    }
  }

  // Private helper methods

  private async generatePackageJson(): Promise<void> {
    const packageJson = {
      name: this.options.pluginName,
      version: '0.1.0',
      description: this.options.description,
      author: this.options.author,
      license: 'MIT',
      main: this.options.typescript ? 'dist/index.js' : 'src/index.js',
      types: this.options.typescript ? 'dist/index.d.ts' : undefined,
      files: ['dist', 'plugin.json', 'README.md'],
      scripts: this.generatePackageScripts(),
      keywords: [
        'lokus',
        'plugin',
        this.template.category.toLowerCase(),
        ...this.template.technologies.map(t => t.toLowerCase())
      ],
      repository: {
        type: 'git',
        url: `https://github.com/${this.options.author}/${this.options.pluginName}.git`
      },
      bugs: {
        url: `https://github.com/${this.options.author}/${this.options.pluginName}/issues`
      },
      homepage: `https://github.com/${this.options.author}/${this.options.pluginName}#readme`,
      engines: {
        node: '>=16.0.0',
        lokus: '^1.0.0'
      },
      dependencies: this.generateDependencies(),
      devDependencies: this.generateDevDependencies()
    };

    // Remove undefined values
    const cleanPackageJson = JSON.parse(JSON.stringify(packageJson));
    
    await fs.writeFile(
      path.join(this.targetDir, 'package.json'),
      JSON.stringify(cleanPackageJson, null, 2)
    );
  }

  private generatePackageScripts(): Record<string, string> {
    const scripts: Record<string, string> = {};

    if (this.options.typescript) {
      scripts.build = 'tsc';
      scripts['build:watch'] = 'tsc --watch';
      scripts.typecheck = 'tsc --noEmit';
    }

    // Build scripts based on bundler
    switch (this.options.bundler) {
      case 'esbuild':
        scripts['build:bundle'] = 'esbuild src/index.ts --bundle --outfile=dist/index.js --platform=node --target=node16';
        break;
      case 'webpack':
        scripts['build:bundle'] = 'webpack';
        break;
      case 'rollup':
        scripts['build:bundle'] = 'rollup -c';
        break;
      case 'vite':
        scripts['build:bundle'] = 'vite build';
        break;
    }

    // Testing scripts
    if (this.options.testing !== 'none') {
      scripts.test = this.options.testing;
      scripts['test:watch'] = `${this.options.testing} --watch`;
      scripts['test:coverage'] = `${this.options.testing} --coverage`;
    }

    // Linting scripts
    if (this.options.linting === 'eslint') {
      scripts.lint = `eslint src/**/*.${this.options.typescript ? 'ts' : 'js'}`;
      scripts['lint:fix'] = `eslint src/**/*.${this.options.typescript ? 'ts' : 'js'} --fix`;
    }

    // Formatting scripts
    if (this.options.formatting === 'prettier') {
      scripts.format = `prettier --write src/**/*.${this.options.typescript ? 'ts' : 'js'}`;
      scripts['format:check'] = `prettier --check src/**/*.${this.options.typescript ? 'ts' : 'js'}`;
    }

    // Documentation scripts
    if (this.options.documentation === 'typedoc') {
      scripts['docs:generate'] = 'typedoc';
      scripts['docs:serve'] = 'http-server docs -p 8080';
    }

    // Plugin development scripts
    scripts.dev = 'lokus-plugin dev';
    scripts.package = 'lokus-plugin package';
    scripts.publish = 'lokus-plugin publish';

    // Storybook scripts
    if (this.options.storybook) {
      scripts.storybook = 'storybook dev -p 6006';
      scripts['build-storybook'] = 'storybook build';
    }

    return scripts;
  }

  private generateDependencies(): Record<string, string> {
    return {
      ...this.template.dependencies
    };
  }

  private generateDevDependencies(): Record<string, string> {
    const devDeps: Record<string, string> = {
      ...this.template.devDependencies
    };

    // Add TypeScript if enabled
    if (this.options.typescript) {
      devDeps.typescript = '^5.2.2';
      devDeps['@types/node'] = '^20.8.0';
    }

    // Add testing framework
    if (this.options.testing === 'jest') {
      devDeps.jest = '^29.7.0';
      devDeps['@types/jest'] = '^29.5.5';
      if (this.options.typescript) {
        devDeps['ts-jest'] = '^29.1.1';
      }
    } else if (this.options.testing === 'vitest') {
      devDeps.vitest = '^0.34.6';
    }

    // Add linting tools
    if (this.options.linting === 'eslint') {
      devDeps.eslint = '^8.50.0';
      if (this.options.typescript) {
        devDeps['@typescript-eslint/eslint-plugin'] = '^6.7.0';
        devDeps['@typescript-eslint/parser'] = '^6.7.0';
      }
    }

    // Add formatting tools
    if (this.options.formatting === 'prettier') {
      devDeps.prettier = '^3.0.3';
    }

    // Add build tools
    switch (this.options.bundler) {
      case 'esbuild':
        devDeps.esbuild = '^0.19.5';
        break;
      case 'webpack':
        devDeps.webpack = '^5.88.2';
        devDeps['webpack-cli'] = '^5.1.4';
        if (this.options.typescript) {
          devDeps['ts-loader'] = '^9.5.0';
        }
        break;
      case 'rollup':
        devDeps.rollup = '^3.29.0';
        devDeps['@rollup/plugin-node-resolve'] = '^15.2.1';
        devDeps['@rollup/plugin-commonjs'] = '^25.0.4';
        if (this.options.typescript) {
          devDeps['@rollup/plugin-typescript'] = '^11.1.4';
        }
        break;
      case 'vite':
        devDeps.vite = '^4.4.11';
        break;
    }

    // Add documentation tools
    if (this.options.documentation === 'typedoc') {
      devDeps.typedoc = '^0.25.2';
      devDeps['http-server'] = '^14.1.1';
    }

    // Add Storybook
    if (this.options.storybook) {
      devDeps['@storybook/react'] = '^7.4.6';
      devDeps['@storybook/addon-essentials'] = '^7.4.6';
      devDeps['@storybook/addon-actions'] = '^7.4.6';
      devDeps['@storybook/addon-controls'] = '^7.4.6';
      devDeps['@storybook/addon-docs'] = '^7.4.6';
      devDeps.storybook = '^7.4.6';
    }

    return devDeps;
  }

  private async generatePluginManifest(): Promise<void> {
    const manifest = {
      name: this.options.pluginName,
      version: '0.1.0',
      description: this.options.description,
      author: this.options.author,
      main: this.options.typescript ? 'dist/index.js' : 'src/index.js',
      engines: {
        lokus: '^1.0.0'
      },
      categories: [this.template.category],
      keywords: [
        this.options.pluginName,
        'lokus',
        'plugin',
        this.template.category.toLowerCase()
      ],
      permissions: this.template.permissions,
      contributes: this.generateContributions(),
      scripts: {
        dev: 'npm run dev',
        build: 'npm run build',
        test: 'npm test'
      },
      repository: {
        type: 'git',
        url: `https://github.com/${this.options.author}/${this.options.pluginName}.git`
      },
      bugs: {
        url: `https://github.com/${this.options.author}/${this.options.pluginName}/issues`
      },
      homepage: `https://github.com/${this.options.author}/${this.options.pluginName}#readme`
    };

    await fs.writeFile(
      path.join(this.targetDir, 'plugin.json'),
      JSON.stringify(manifest, null, 2)
    );
  }

  private generateContributions(): any {
    const contributions: any = {};

    switch (this.template.category) {
      case 'Language':
        contributions.languages = [{
          id: `${this.options.pluginName}-lang`,
          aliases: [this.options.pluginName],
          extensions: [`.${this.options.pluginName.slice(0, 3)}`]
        }];
        break;
      case 'Theme':
        contributions.themes = [{
          label: this.options.pluginName,
          uiTheme: 'vs-dark',
          path: './themes/theme.json'
        }];
        break;
      case 'Tool':
        contributions.commands = [{
          command: `${this.options.pluginName}.main`,
          title: `${this.options.pluginName} Command`
        }];
        break;
      case 'UI':
        contributions.views = [{
          id: `${this.options.pluginName}-view`,
          name: this.options.pluginName,
          when: 'true'
        }];
        break;
    }

    return contributions;
  }

  // Build system config generators
  private async generateESBuildConfig(): Promise<void> {
    const config = `const esbuild = require('esbuild');

const isProduction = process.env.NODE_ENV === 'production';

esbuild.build({
  entryPoints: ['src/index.${this.options.typescript ? 'ts' : 'js'}'],
  bundle: true,
  outfile: 'dist/index.js',
  platform: 'node',
  target: 'node16',
  format: 'cjs',
  sourcemap: !isProduction,
  minify: isProduction,
  external: ['@lokus/plugin-sdk'],
  define: {
    'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV || 'development')
  }
}).catch(() => process.exit(1));`;

    await fs.writeFile(path.join(this.targetDir, 'esbuild.config.js'), config);
  }

  private async generateWebpackConfig(): Promise<void> {
    const config = `const path = require('path');

module.exports = {
  entry: './src/index.${this.options.typescript ? 'ts' : 'js'}',
  target: 'node',
  mode: process.env.NODE_ENV || 'development',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'index.js',
    libraryTarget: 'commonjs2'
  },
  externals: {
    '@lokus/plugin-sdk': 'commonjs2 @lokus/plugin-sdk'
  },
  ${this.options.typescript ? `resolve: {
    extensions: ['.ts', '.js']
  },
  module: {
    rules: [
      {
        test: /\\.ts$/,
        use: 'ts-loader',
        exclude: /node_modules/
      }
    ]
  },` : ''}
  devtool: 'source-map'
};`;

    await fs.writeFile(path.join(this.targetDir, 'webpack.config.js'), config);
  }

  private async generateRollupConfig(): Promise<void> {
    const config = `import resolve from '@rollup/plugin-node-resolve';
import commonjs from '@rollup/plugin-commonjs';
${this.options.typescript ? "import typescript from '@rollup/plugin-typescript';" : ''}

export default {
  input: 'src/index.${this.options.typescript ? 'ts' : 'js'}',
  output: {
    file: 'dist/index.js',
    format: 'cjs',
    sourcemap: true
  },
  external: ['@lokus/plugin-sdk'],
  plugins: [
    resolve(),
    commonjs(),
    ${this.options.typescript ? 'typescript()' : ''}
  ]
};`;

    await fs.writeFile(path.join(this.targetDir, 'rollup.config.js'), config);
  }

  private async generateViteConfig(): Promise<void> {
    const config = `import { defineConfig } from 'vite';

export default defineConfig({
  build: {
    lib: {
      entry: 'src/index.${this.options.typescript ? 'ts' : 'js'}',
      name: '${this.options.pluginName}',
      fileName: 'index',
      formats: ['cjs']
    },
    rollupOptions: {
      external: ['@lokus/plugin-sdk']
    },
    target: 'node16',
    sourcemap: true
  }
});`;

    await fs.writeFile(path.join(this.targetDir, 'vite.config.ts'), config);
  }

  // Test setup generators
  private generateJestSetup(): string {
    return `// Jest setup file
global.console = {
  ...console,
  // Uncomment to ignore specific log levels:
  // log: jest.fn(),
  // debug: jest.fn(),
  // info: jest.fn(),
  // warn: jest.fn(),
  // error: jest.fn(),
};`;
  }

  private generateVitestSetup(): string {
    return `// Vitest setup file
import { vi } from 'vitest';

// Mock @lokus/plugin-sdk for testing
vi.mock('@lokus/plugin-sdk', () => ({
  PluginContext: vi.fn(),
  Logger: vi.fn(),
  // Add other SDK mocks as needed
}));`;
  }

  private generateSampleTest(): string {
    return `import { ${this.options.pluginName.replace(/-([a-z])/g, (_, letter) => letter.toUpperCase())} } from './index';

describe('${this.options.pluginName}', () => {
  it('should be defined', () => {
    expect(${this.options.pluginName.replace(/-([a-z])/g, (_, letter) => letter.toUpperCase())}).toBeDefined();
  });

  // Add more tests here
});`;
  }

  // Documentation generators
  private async generateReadme(): Promise<string> {
    return `# ${this.options.pluginName}

${this.options.description}

## Features

${this.template.features.map(feature => `- ${feature}`).join('\n')}

## Installation

\`\`\`bash
npm install ${this.options.pluginName}
\`\`\`

## Usage

\`\`\`${this.options.typescript ? 'typescript' : 'javascript'}
// Example usage here
\`\`\`

## Development

\`\`\`bash
# Install dependencies
npm install

# Start development server
npm run dev

# Run tests
npm test

# Build for production
npm run build
\`\`\`

## Contributing

See [CONTRIBUTING.md](CONTRIBUTING.md) for details.

## License

MIT © [${this.options.author}](https://github.com/${this.options.author})

---

Generated with [Lokus Plugin CLI](https://lokus.dev/docs/plugin-development)`;
  }

  private async generateContributing(): string {
    return `# Contributing to ${this.options.pluginName}

Thank you for your interest in contributing! This document provides guidelines for contributing to this plugin.

## Development Setup

1. Fork and clone the repository
2. Install dependencies: \`npm install\`
3. Start development server: \`npm run dev\`

## Development Workflow

1. Create a feature branch: \`git checkout -b feature/your-feature\`
2. Make your changes
3. Add tests for new functionality
4. Run tests: \`npm test\`
5. Run linting: \`npm run lint\`
6. Commit your changes: \`git commit -am 'Add some feature'\`
7. Push to the branch: \`git push origin feature/your-feature\`
8. Create a Pull Request

## Code Style

${this.options.linting !== 'none' ? `This project uses ${this.options.linting} for linting. Run \`npm run lint\` to check your code.` : ''}

${this.options.formatting !== 'none' ? `Code formatting is handled by ${this.options.formatting}. Run \`npm run format\` to format your code.` : ''}

## Testing

${this.options.testing !== 'none' ? `This project uses ${this.options.testing} for testing. Please add tests for any new functionality.` : 'Please add appropriate tests for any new functionality.'}

## Release Process

1. Update version in \`package.json\` and \`plugin.json\`
2. Update \`CHANGELOG.md\`
3. Create a git tag: \`git tag v0.1.0\`
4. Push tag: \`git push origin v0.1.0\`
5. Publish to registry: \`npm run publish\`

## Questions?

Feel free to open an issue for any questions or concerns.`;
  }

  private async generateChangelog(): string {
    return `# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [Unreleased]

### Added
- Initial plugin structure
- ${this.template.features.join('\n- ')}

## [0.1.0] - ${new Date().toISOString().split('T')[0]}

### Added
- Initial release
- Plugin generated with Lokus Plugin CLI`;
  }

  private async generateTypedocConfig(): Promise<void> {
    const config = {
      entryPoints: ['src/index.ts'],
      out: 'docs',
      theme: 'default',
      excludePrivate: true,
      excludeProtected: true,
      excludeExternals: true,
      readme: 'README.md',
      name: this.options.pluginName,
      includeVersion: true
    };

    await fs.writeFile(
      path.join(this.targetDir, 'typedoc.json'),
      JSON.stringify(config, null, 2)
    );
  }

  // Example generators for different template categories
  private async generateUIExamples(): Promise<void> {
    // UI-specific examples would go here
  }

  private async generateLanguageExamples(): Promise<void> {
    // Language support examples would go here
  }

  private async generateThemeExamples(): Promise<void> {
    // Theme examples would go here
  }

  private async generateIntegrationExamples(): Promise<void> {
    // Integration examples would go here
  }

  private async generateToolExamples(): Promise<void> {
    // Tool examples would go here
  }

  private async generateDataExamples(): Promise<void> {
    // Data visualization examples would go here
  }

  private async generateBasicExamples(): Promise<void> {
    const exampleContent = `// Example usage of ${this.options.pluginName}

import { ${this.options.pluginName.replace(/-([a-z])/g, (_, letter) => letter.toUpperCase())} } from '../src';

// Basic example
const plugin = new ${this.options.pluginName.replace(/-([a-z])/g, (_, letter) => letter.toUpperCase())}();

// Add your example code here
console.log('Plugin loaded:', plugin);`;

    await fs.writeFile(
      path.join(this.targetDir, 'examples', `basic.${this.options.typescript ? 'ts' : 'js'}`),
      exampleContent
    );
  }
}